ADMIN_ID = 7229552057

import telebot
from telebot import types
import time
from urllib3.exceptions import ReadTimeoutError
from requests.exceptions import ReadTimeout
import sqlite3
import logging


logging.basicConfig(
    level=logging.ERROR,
    format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename = 'bot_errors.log',
    filemode = 'a'
)


bot = telebot.TeleBot('7820681321:AAHqm4A5wbPSTmJfHtur0PSwkMN2I4WgXXM')

welcome_text = """
CyberKing ‚Äî —Ç–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª—É–± –≤ —Ü–µ–Ω—Ç—Ä–µ –†–æ—Å—Ç–æ–≤–∞!

–ù–∞ —É–ª–∏—Ü–µ –õ–µ—Ä–º–æ–Ω—Ç–æ–≤—Å–∫–∞—è, 57, –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ, –≥–¥–µ —Å–±—ã–≤–∞—é—Ç—Å—è –º–µ—á—Ç—ã –≤—Å–µ—Ö –≥–µ–π–º–µ—Ä–æ–≤ –∏ –ª—é–±–∏—Ç–µ–ª–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ‚Äî CyberKing!

–£ –Ω–∞—Å —Ç—ã –Ω–∞–π–¥–µ—à—å:
üéÆ –ú–æ—â–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —Å —Ç–æ–ø–æ–≤—ã–º –∂–µ–ª–µ–∑–æ–º –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ –ª—é–±—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ‚Äî –æ—Ç –∫–ª–∞—Å—Å–∏–∫–∏ –¥–æ –Ω–æ–≤–∏–Ω–æ–∫.
üí∏ –û—Ç–ª–∏—á–Ω—ã–µ —Ü–µ–Ω—ã ‚Äî –º—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –º–æ–≥ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö.
üåü –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ ‚Äî —Å—Ç–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä, —É–¥–æ–±–Ω—ã–µ –∫—Ä–µ—Å–ª–∞ –∏ –ø—Ä–∏—è—Ç–Ω–∞—è –º—É–∑—ã–∫–∞ —Å–æ–∑–¥–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä –∏ –æ–±—â–µ–Ω–∏—è.
üë®‚Äçüíª –û—Ç–∑—ã–≤—á–∏–≤—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ‚Äî –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É—Ç, –ø–æ–¥—Å–∫–∞–∂—É—Ç –∏ —Å–¥–µ–ª–∞—é—Ç —Ç–≤–æ–π –≤–∏–∑–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º.

CyberKing ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª—É–±, —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏, –≥–¥–µ —Ä–æ–∂–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ –¥—Ä—É–∂–±—ã –∏ —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏. –ü—Ä–∏—Ö–æ–¥–∏ –æ–¥–∏–Ω –∏–ª–∏ —Å –¥—Ä—É–∑—å—è–º–∏ ‚Äî —Å–∫—É—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç!

üìç –ê–¥—Ä–µ—Å: –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, —É–ª. –õ–µ—Ä–º–æ–Ω—Ç–æ–≤—Å–∫–∞—è, 57
üìû –ó–≤–æ–Ω–∏, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ: +7 (XXX) XXX-XX-XX

CyberKing ‚Äî —Ç–≤–æ—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∏–≥—Ä –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π! –ñ–¥–µ–º —Ç–µ–±—è! üöÄ
"""

conn = sqlite3.connect('Cyber_King_bot.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('DROP TABLE IF EXISTS users')
cursor.execute('DROP TABLE IF EXISTS user_requests')
cursor.execute('DROP TABLE IF EXISTS user_balance')
cursor.execute('DROP TABLE IF EXISTS referrals')
cursor.execute('DROP TABLE IF EXISTS transactions')

conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    phone_number TEXT,
    password TEXT,
    join_date TEXT            
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS user_requests(
    request_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    request_type TEXT,
    request_date TEXT,
    FOREIGN KEY (user_id) REFERENCES users (user_id)               
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS user_balance (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS referrals (
    referral_id INTEGER PRIMARY KEY AUTOINCREMENT,
    referrer_id INTEGER,
    referred_id INTEGER,
    referral_date TEXT,
    FOREIGN KEY (referrer_id) REFERENCES users (user_id),
    FOREIGN KEY (referred_id) REFERENCES users (user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS transactions (
    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    transaction_type TEXT,
    amount INTEGER,
    description TEXT,
    transaction_date TEXT,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS tournaments (
    tournament_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    date TEXT
)
''')

conn.commit()

def add_transaction(user_id, transaction_type, amount, description):
    try:
        cursor.execute('''
        INSERT INTO transactions (user_id, transaction_type, amount, description, transaction_date)
        VALUES (?, ?, ?, ?, datetime('now'))
        ''', (user_id, transaction_type, amount, description))
        conn.commit
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}')

def add_user(user_id, username, first_name, last_name, referrer_id = None):
    try:
        cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, join_date)
        VALUES (?, ?, ?, ?, datetime('now'))
        ''', (user_id, username, first_name, last_name))
        conn.commit()

        if referrer_id:
            cursor.execute('''
            INSERT INTO referrals (referrer_id,referred_id, referral_date)
            VALUES (?, ?, datetime('now'))
            ''', (referrer_id, user_id))
            conn.commit()

            update_user_balance(referrer_id, 30)
            add_transaction(referrer_id, 'bonus', 30 * 100, '–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')

def add_user_request(user_id, request_type):
    try:
        cursor.execute('''
        INSERT INTO user_requests (user_id, request_type, request_date)
        VALUES (?,?, datetime('now'))
        ''', (user_id, request_type))
        conn.commit()
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')

def get_user_balance(user_id):
    try:
        cursor.execute('SELECT balance FROM user_balance WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else 0
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}')
        return 0

def update_user_balance(user_id, minutes):
    try:
        cursor.execute('''
        INSERT OR IGNORE INTO user_balance (user_id, balance) VALUES (?,0)
        ''', (user_id,))
        cursor.execute('''
        UPDATE user_balance SET balance = balance + ? WHERE user_id = ?
         ''', (minutes, user_id))
        conn.commit()
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}')

def is_user_registered(user_id):
    try:
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return result is not None 
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {e}')
        return False               

def create_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_price = types.KeyboardButton('üí≥/price')
    button_prizes = types.KeyboardButton('üéÅ/prizes')
    button_iron = types.KeyboardButton('üñ•/iron')
    button_combo = types.KeyboardButton('üéü/combo')
    button_games = types.KeyboardButton('üéÆ/games')
    button_tournaments = types.KeyboardButton('üèÜ/tournaments')
    button_deposit = types.KeyboardButton('üíµ/deposit_funds')
    button_profile = types.KeyboardButton('ü§ñ/profile')
    button_ref = types.KeyboardButton('üë•/ref')
    button_history = types.KeyboardButton('üìú/history')
    markup.add(button_price, button_prizes, button_iron, button_combo, button_games, button_tournaments, button_deposit, button_profile, button_ref, button_history)
    return markup

def create_tariff_keyboard():
    markup = types.ReplyKeyboardMarkup (row_width=2, resize_keyboard=True)
    button_50 = types.KeyboardButton ('50 —Ä—É–±–ª–µ–π (15 –º–∏–Ω—É—Ç)')
    button_100 = types.KeyboardButton ('100 —Ä—É–±–ª–µ–π (30 –º–∏–Ω—É—Ç)')
    button_custom = types.KeyboardButton ('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É')
    markup.add(button_50, button_100, button_custom)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name

        referrer_id = None
        if len(message.text.split()) > 1:
            referrer_id = int(message.text.split()[1])

        add_user(user_id, username, first_name, last_name, referrer_id)

        bot.send_message(message.chat.id, welcome_text, reply_markup=create_reply_keyboard())

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}')

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return
    
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_users = types.KeyboardButton('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    button_transactions = types.KeyboardButton('üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    button_tournaments = types.KeyboardButton('üèÜ –¢—É—Ä–Ω–∏—Ä—ã')
    button_broadcast = types.KeyboardButton('üì¢ –†–∞—Å—Å—ã–ª–∫–∞')
    markup.add(button_users, button_transactions, button_tournaments, button_broadcast)

    bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup = markup)

@bot.message_handler(func = lambda message: message.text == 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' and message.from_user.id == ADMIN_ID)
def view_users(message):
    try:
        cursor.execute('SELECT user_id, username, first_name, last_name, join_date FROM users')
        users = cursor.fetchall()

        if not users:
            bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            return
        
        response = "üë§ *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
        for user in users:
            user_id, username, first_name, last_name, join_date = user
            response += (
                f"üÜî *ID:* {user_id}\n"
                f"üë§ *–ò–º—è:* {first_name} {last_name}\n"
                f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {join_date}\n\n"
            )

        bot.send_message(message.chat.id, response, parse_mode='Markdown')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

@bot.message_handler(func=lambda message: message.text == 'üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' and message.from_user.id == ADMIN_ID)
def view_transactions(message):
    try:
        cursor.execute('SELECT * FROM transactions ORDER BY transactions_date DESC')
        transactions = cursor.fetchall()

        if not transactions:
            bot.send_message(message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            return
        
        response = "üí≥ *–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*\n\n"
        for transaction in transactions:
            transaction_id, user_id, transaction_type, amount, description, transaction_date = transaction
            response += (
                f"üìÖ *–î–∞—Ç–∞:* {transaction_date}\n"
                f"üÜî *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_id}\n"
                f"üí≥ *–¢–∏–ø:* {transaction_type}\n"
                f"üí∞ *–°—É–º–º–∞:* {amount / 100} —Ä—É–±.\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
            )
            bot.send_message(message.chat.id, response, parse_mode='Markdown')

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.')

@bot.message_handler(func=lambda message: message.text == 'üìú/history')
def handle_history(message):
    try:
        user_id = message.from_user.id
        is_admin = user_id == ADMIN_ID # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

        if is_admin:
            cursor.execute('SELECT * FROM transactions ORDER BY transaction_date DESC')

        else:
            cursor.execute('SELECT * FROM transactions WHERE user_id = ? ORDER BY transaction_date DESC', (user_id,))

            transactions = cursor.fetchall()

            if not transactions:
                bot.send_message(message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞.')
                return
            
            response = 'üìú *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*\n\n'
            for transaction in transactions:
                transaction_id, user_id, transaction_type, amount, description, transaction_date = transaction
                response += (
                    f"üìÖ *–î–∞—Ç–∞:* {transaction_date}\n"
                f"üí≥ *–¢–∏–ø:* {transaction_type}\n"
                f"üí∞ *–°—É–º–º–∞:* {amount / 100} —Ä—É–±.\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
                )
            bot.send_message(message.chat.id, response, parse_mode='Markdown')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /history {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')

@bot.message_handler(func = lambda message: message.text == 'üèÜ –¢—É—Ä–Ω–∏—Ä—ã' and message.from_user.id == ADMIN_ID)
def add_tournament(message):
    try:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:')
        bot.register_next_step_handler(message, process_tournament_name)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞.')

def process_tournament_name(message):
    try:
        tournament_name = message.text
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):')
        bot.register_next_step_handler(message, process_tournament_date, tournament_name)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞.')

def process_tournament_date(message, tournament_name):
    try:
        tournament_date = message.text
        cursor.execute('INSERT INTO tournaments (name, date) VALUES (?, ?)', (tournament_name, tournament_date))
        conn.commit()
        bot.send_message(message.chat.id, f"–¢—É—Ä–Ω–∏—Ä '{tournament_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {tournament_date}.")
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞.')

@bot.message_handler(func = lambda message: message.text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞' and message.from_user.id == ADMIN_ID)
def broadcast_message(message):
    try:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
        bot.register_next_step_handler(message, process_broadcast_message)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.')

def process_broadcast_message(message):
    try:
        broadcast_text = message.text
        cursor.execute('SELECT user_id From users')
        users = cursor.fetchall()

        for user in users:
            try:
                bot.send_message(user[0], broadcast_text)
            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]}: {e}')

        bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.')

@bot.message_handler(func=lambda message: message.text == 'üë•/ref')
def handle_ref(message):
    try:
        user_id = message.from_user.id
        ref_link = f'https://t.me/{bot.get_me().username}?start = {user_id}'

        cursor.execute('SELECT COUNT(*) FROM referrals WHERE referrer_id = ?',(user_id,))
        ref_count = cursor.fetchone()[0]

        bot.send_message (
            message.chat.id,
            f"üë• *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n"
            f"`{ref_link}`\n\n"
            f"üìä *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {ref_count}\n"
            f"üéÅ *–í–∞—à –±–æ–Ω—É—Å:* {ref_count * 30} –º–∏–Ω—É—Ç",
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /ref {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')

@bot.message_handler(func=lambda message: message.text == 'üíµ/deposit_funds')
def handle_deposit(message):
    try:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É', reply_markup=create_tariff_keyboard())
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

@bot.message_handler(func=lambda message: message.text in ['50 —Ä—É–±–ª–µ–π (15 –º–∏–Ω—É—Ç)', '100 —Ä—É–±–ª–µ–π (30 –º–∏–Ω—É—Ç)'])
def handle_tariff(message):
    try:
        if message.text == '50 —Ä—É–±–ª–µ–π (15 –º–∏–Ω—É—Ç)':
            amount = 5000 # 50 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            minutes = 15
        elif message.text == '100 —Ä—É–±–ª–µ–π (30 –º–∏–Ω—É—Ç)':
            amount = 10000 # 100 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            minutes = 30

        #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        title = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'
        description = f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount / 100} —Ä—É–±–ª–µ–π ({minutes} –º–∏–Ω—É—Ç)'
        payload = 'unique-payload'
        provider_token = 'YOUR_PROVIDER_TOKEN' # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
        start_parameter = 'test'
        currency = 'RUB'
        prices = [types.LabeledPrice(label = f'{amount / 100} —Ä—É–±–ª–µ–π', amount=amount)]

        bot.send_invoice(
            message.chat.id,
            title,
            description,
            payload,
            provider_token,
            start_parameter,
            currency,
            prices
        )
    except ValueError:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É')

@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    try:
        user_id = message.from_user.id
        payment_info = message.successful_payment

        minutes = (payment_info.total_amount // 5000) * 15
        update_user_balance(user_id, minutes)

        bot.send_message(message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç!')

        admin_message = (
            f'–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n'
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {message.from_user.username} (ID: {user_id})\n'
            f'–°—É–º–º–∞: {payment_info.total_amount / 100} —Ä—É–±–ª–µ–π\n'
            f'–ó–∞—á–∏—Å–ª–µ–Ω–æ –º–∏–Ω—É—Ç: {minutes}'            
        )
        bot.send_message(ADMIN_ID, admin_message)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ')

@bot.message_handler(commands=['price'])
def send_photo_price(message):
    try:
        user_id = message.from_user.id
        add_user_request(user_id, 'price')

        photos = [
            ('CyberKing/jpg/–¶–µ–Ω—ã.jpg')
        ]
        for photo_path in photos:
            try:
                with open(photo_path, 'rb') as file:
                    bot.send_photo(message.chat.id, file)
            except FileNotFoundError:
                logging.error(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                bot.send_message(message.chat.id, f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /price: {e}')

@bot.message_handler(commands=['profile'])
def user_profile(message):
    try:
        user_id = message.from_user.id 
        balance = get_user_balance(user_id)

        text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n" \
               f"üìå *ID:* {user_id}\n" \
               f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} –º–∏–Ω—É—Ç\n"
        bot.send_message(message.chat.id, text, parse_mode='Markdown')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /profile: {e}')
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è')

@bot.message_handler(commands=['prizes'])
def send_photo_prizes(message):
    try:
        user_id = message.from_user.id
        add_user_request(user_id, 'prizes')

        photos = [
            ('CyberKing/jpg/prizes 1.jpg'),
            ('CyberKing/jpg/prizes 2.jpg'),
            ('CyberKing/jpg/prizes 3.jpg')
        ]
        for photo_path in photos:
            try:
                with open(photo_path, 'rb') as file:
                    bot.send_photo(message.chat.id, file)
            except FileNotFoundError:
                logging.error(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                bot.send_message(message.chat.id, f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /prizes: {e}')

@bot.message_handler(commands=['iron'])
def send_photo_iron(message):
    try:
        user_id = message.from_user.id
        add_user_request(user_id, 'iron')

        photos = [
            'CyberKing/jpg/iron.jpg'
        ]
        for photo_path in photos:
            try:
                with open(photo_path, 'rb') as file:
                    bot.send_photo(message.chat.id, file)
            except FileNotFoundError:
                logging.error(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                bot.send_message(message.chat.id, f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /iron: {e}')

@bot.message_handler(commands=['combo'])
def send_photo_combo(message):
    try:
        user_id = message.from_user.id
        add_user_request(user_id, 'combo')

        photos = [
            'CyberKing/jpg/combo.jpg'
        ]
        for photo_path in photos:
            try:
                with open(photo_path, 'rb') as file:
                    bot.send_photo(message.chat.id, file)
            except FileNotFoundError:
                logging.error(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                bot.send_message(message.chat.id, f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /combo: {e}')

@bot.message_handler(commands=["games"])
def send_photo_games(message):
    try:
        user_id = message.from_user.id
        add_user_request(user_id, 'games')

        photos = [
            'CyberKing/jpg/games.jpg'
        ]
        for photo_path in photos:
            try:
                with open(photo_path, 'rb') as file:
                    bot.send_photo(message.chat.id, file)
            except FileNotFoundError:
                logging.error(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                bot.send_message(message.chat.id, f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /games: {e}')

@bot.message_handler(commands=['tournaments'])
def send_photo_tournaments(message):
    try:
        user_id = message.from_user.id
        add_user_request(user_id, 'tournaments')

        photos = [
            'CyberKing/jpg/cup.jpg'
        ]
        for photo_path in photos:
            try:
                with open(photo_path, 'rb') as file:
                    bot.send_photo(message.chat.id, file)
            except FileNotFoundError:
                logging.error(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                bot.send_message(message.chat.id, f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /tournaments: {e}')

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if message.text == 'üí≥/price':
        send_photo_price(message)
    elif message.text == 'üéÅ/prizes':
        send_photo_prizes(message)
    elif message.text == 'üñ•/iron':
        send_photo_iron(message)
    elif message.text == 'üéü/combo':
        send_photo_combo(message)
    elif message.text == 'üéÆ/games':
        send_photo_games(message)
    elif message.text == 'üèÜ/tournaments':
        send_photo_tournaments(message)
    elif message.text == 'üíµ/deposit_funds':
        handle_deposit(message)
    elif message.text == "ü§ñ/profile":
        user_profile(message)
    else:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

while True:
    try:
        bot.polling(timeout = 60)
    except (ReadTimeoutError, ReadTimeout) as e:
        print(f'–û—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...')
        time.sleep(10)
    except Exception as e:
        print(f'–ö—Ä–∏—Ç–∏—á–∏—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...')
        time.sleep(10)
